class Solution {
    // target 0
    // mid. 1
    //       m
    //       s    e          e
    // 0     1    2    3    4 
    // [1,   0,   1,   1,   1]

    public boolean search(int[] nums, int target) {
        int start = 0, end = nums.length-1;
        while(start <= end){
            int mid = start + (end-start)/2;
            if(nums[mid] == target)
               return true;
            while(start != mid && nums[start] == nums[mid])
               start++;
            while(mid != end && nums[mid] == nums[end])
               end--;
            if(nums[start] <= nums[mid]){
                if(target >= nums[start] && target <= nums[mid]){
                    end = mid;
                }else{
                    start = mid+1;
                }
            }else if(nums[mid] <= nums[end]){
                if(target >= nums[mid] && target <= nums[end]){
                    start = mid;
                }else{
                    end = mid-1;
                }
            }else{
                return false;
            }
        }
        return false;
    }
}


// Time complexity : O(log n)
// Space : O(1)
